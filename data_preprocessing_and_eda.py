# -*- coding: utf-8 -*-
"""data_preprocessing_and_eda.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Q7-9YBRaeBy6neQq9pQXP0ReTWBCTXc2

### Import Data and Libraries
"""

# Commented out IPython magic to ensure Python compatibility.
import numpy as np
import pandas as pd
import matplotlib.pyplot as plt
import seaborn as sns

from matplotlib import style
style.use('ggplot')

import warnings
warnings.filterwarnings('ignore')

# %matplotlib inline

titanic = pd.read_csv('train.csv')
titanic.head(10)

titanic.shape

titanic.info()

titanic.nunique()

print('Survived : ', titanic.Survived.unique())
print('Pclasses : ', titanic.Pclass.unique())
print('Gender   : ', titanic.Sex.unique())
print('Embarked : ', titanic.Embarked.dropna().unique())

"""---
---

### Check for duplicates
    - Drop the duplicate
"""

titanic.duplicated().sum()

titanic.drop_duplicates(inplace = True)  # To remove duplicates

"""### Dealing with missing values"""

titanic.isnull().sum()

"""- **If number of missing values in a column is very large wrt total values then dropping that column is a suitable strategy**"""

687/891

titanic.drop('Cabin', axis = 1, inplace = True)
titanic.head()

"""- **In numerical columns missing values can be replaced by the mean or median of that column**"""

plt.figure(figsize = (12,5), dpi = 200)
sns.distplot(titanic.Age, hist = False)

mean_age = titanic.Age.mean()
titanic.Age.replace(np.nan, mean_age, inplace = True)

titanic.Age.isnull().sum()

"""- **In categorical columns missing values can be replaced with mode**"""

mode_emb = titanic.Embarked.dropna().mode()[0]
mode_emb

mode_emb = titanic.Embarked.dropna().mode()[0]
titanic.Embarked.replace(np.nan, mode_emb, inplace = True)



titanic.Embarked.isnull().sum()

titanic.isnull().sum()

"""## Strategies to deal with missing values
- If number of missing values in a column is very large wrt total values then dropping that column is a suitable strategy
- In numerical columns missing values can be replaced by the mean or median of that column
- In categorical columns missing values cam be replaced with mode
- If number of rows having missing values is very small wrt total rows then these rows can be dropped
                          - titanic.dropna(inplace = True)

----
----
"""

# Creating a new column family_members by adding SibSp and Parch
titanic['family_members'] = titanic.SibSp + titanic.Parch
titanic.drop(['SibSp', 'Parch'], inplace = True, axis = 1)

titanic.head()

"""---
---

## Exploratory Data Analysis
"""

# How many passengers survived and how many did not survive
plt.figure(figsize = (12,5), dpi = 200)
sns.countplot(x = 'Survived', data = titanic,width=0.2)

titanic.Survived.value_counts()

survival_ratio = titanic.Survived.value_counts(normalize = True)
print('Percentage of survivors : ', round(survival_ratio[1]*100,2))
print('Percentage of dead      : ', round(survival_ratio[0]*100,2))

# Analysing gender and survival
plt.figure(figsize = (12,5), dpi = 200)
sns.countplot(x = 'Sex', hue = 'Survived', data = titanic)

svl_rate = titanic.groupby('Sex').Survived.value_counts(normalize = True)
svl_rate

print('Percentage of female survivors : ', round(svl_rate['female'][1]*100,2))
print('Percentage of dead females     : ', round(svl_rate['female'][0]*100,2))
print('Percentage of male survivors   : ', round(svl_rate['male'][1]*100,2))
print('Percentage of dead males       : ', round(svl_rate['male'][0]*100,2))

svl_rate['male']

svl_rate = svl_rate.sort_index()
males = svl_rate['male']
females = svl_rate['female']
labels = ['Dead', 'Survived']

plt.figure(figsize = (18,5), dpi = 200, facecolor = '#d0e1f2')
plt.subplot(1,2,1)
plt.pie(males, autopct = '%1.1f%%', labels = labels, explode = [0, 0.1])
plt.title('Male Survival')
plt.subplot(1,2,2)
plt.pie(females, autopct = '%1.1f%%', labels = labels, explode = [0, 0.1])
plt.title('Female Survival')

titanic.head()

# Analysing passenger class and survival
plt.figure(figsize = (12,5), dpi = 200)
sns.countplot(x = 'Pclass', hue = 'Survived', data = titanic)

titanic['Pclass'].value_counts()

titanic.groupby('Pclass')['Survived'].value_counts()

svl_rate = titanic.groupby('Pclass')['Survived'].value_counts(normalize  = True)
svl_rate

print('Percentage of 1st Passenger class Survivors : ', round(svl_rate[1][1]*100,2), '%')
print('Percentage of 1st Passenger class Dead      : ', round(svl_rate[1][0]*100,2), '%')
print('Percentage of 2nd Passenger class Survivors : ', round(svl_rate[2][1]*100,2), '%')
print('Percentage of 2nd Passenger class Dead      : ', round(svl_rate[2][0]*100,2), '%')
print('Percentage of 3rd Passenger class Survivors : ', round(svl_rate[3][1]*100,2), '%')
print('Percentage of 3rd Passenger class Dead      : ', round(svl_rate[3][0]*100,2), '%')

svl_rate = svl_rate.sort_index()
pclass1, pclass2, pclass3 = svl_rate[1], svl_rate[2], svl_rate[3]
labels = ['Dead', 'Survived']

plt.figure(figsize = (18,6), dpi = 200, facecolor = '#d0e1f2')
plt.subplot(1,3,1)
plt.pie(pclass1, autopct = '%1.1f%%', labels = labels, explode = [0, 0.1])
plt.title('Passenger Class1')
plt.subplot(1,3,2)
plt.pie(pclass2, autopct = '%1.1f%%', labels = labels, explode = [0, 0.1])
plt.title('Passenger Class2')
plt.subplot(1,3,3)
plt.pie(pclass3, autopct = '%1.1f%%', labels = labels, explode = [0, 0.1])
plt.title('Passenger Class3')

# Analysing Embarked and survival
plt.figure(figsize = (12,5), dpi = 200)
sns.countplot(x = 'Embarked', hue = 'Survived', data = titanic)

svl_rate = titanic.groupby('Embarked')['Survived'].value_counts(normalize  = True)
svl_rate

# Fare and Passenger class
plt.figure(figsize = (12,5), dpi = 200)
sns.barplot(x = 'Pclass', y = 'Fare', data = titanic)

plt.figure(figsize = (16,5), dpi = 200)
sns.boxplot(x = 'Pclass', y = 'Fare', data = titanic)

# Fare and Survived
plt.figure(figsize = (16,5), dpi = 200)
plt.subplot(1,2,1)
sns.barplot(x = 'Survived', y = 'Fare', data = titanic)
plt.subplot(1,2,2)
sns.boxplot(x = 'Survived', y = 'Fare', data = titanic)

titanic[titanic.Fare > 500]

# Age
plt.figure(figsize = (16,5), dpi = 200)
plt.subplot(1,2,1)
sns.violinplot(y = 'Age', data = titanic)
plt.subplot(1,2,2)
sns.boxplot(y = 'Age', data = titanic)

# Age and Survived
plt.figure(figsize = (16,5), dpi = 200)
plt.subplot(1,2,1)
sns.barplot(x = 'Survived', y = 'Age', data = titanic)
plt.subplot(1,2,2)
sns.boxplot(x = 'Survived', y = 'Age', data = titanic)

# Family members and survived
plt.figure(figsize = (16,8), dpi = 200)
sns.countplot(x = 'family_members', hue = 'Survived', data = titanic)

